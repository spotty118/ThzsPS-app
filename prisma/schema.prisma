//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  applications      Application[]      @relation("user")
  subscriptions     Subscription[]     @relation("user")
  paymentMethods    PaymentMethod[]    @relation("user")
  notifications     Notification[]     @relation("user")
  supportTickets    SupportTicket[]    @relation("user")
}

/// @@allow('all', true)
model Application {
  id             String         @id() @default(uuid())
  name           String
  description    String?
  userId         String
  user           User?          @relation(fields: [userId], references: [id], name: "user")
  organizationId String?
  organization   Organization?  @relation(fields: [organizationId], references: [id], name: "organization")
  subscriptions  Subscription[] @relation("application")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Subscription {
  id            String       @id() @default(uuid())
  status        String?
  startDate     String?
  endDate       String?
  applicationId String
  application   Application? @relation(fields: [applicationId], references: [id], name: "application")
  userId        String
  user          User?        @relation(fields: [userId], references: [id], name: "user")
  invoices      Invoice[]    @relation("subscription")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Invoice {
  id             String        @id() @default(uuid())
  amount         Float?
  issueDate      String?
  dueDate        String?
  status         String?
  subscriptionId String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], name: "subscription")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PaymentMethod {
  id        String   @id() @default(uuid())
  type      String?
  details   String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id        String   @id() @default(uuid())
  message   String?
  readAt    String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SupportTicket {
  id            String   @id() @default(uuid())
  subject       String?
  description   String?
  status        String?
  attachmentUrl String?
  userId        String
  user          User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id           String             @id() @default(uuid())
  name         String
  pictureUrl   String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt()
  roles        OrganizationRole[]
  applications Application[]      @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
